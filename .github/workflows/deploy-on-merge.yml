name: Deploy on merge

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: deploy-main
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: self-hosted
    env:
      DATADIR: ${{ vars.DATADIR }}
      DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
      SSL_EMAIL: ${{ secrets.SSL_EMAIL }}
      TIMEZONE: ${{ vars.TIMEZONE }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
      STORAGE_ENCRYPTION_KEY: ${{ secrets.STORAGE_ENCRYPTION_KEY }}
    steps:
      - uses: actions/checkout@v5

      - name: Find all docker-compose files
        id: find-compose
        run: |
          # Find traefik first, then others
          traefik=$(find . -name "docker-compose.yml" -path "*/traefik/*" -not -path "./.git/*" | xargs -I {} dirname {})
          others=$(find . -name "docker-compose.yml" -not -path "*/traefik/*" -not -path "./.git/*" | xargs -I {} dirname {} | sort)
          # Combine with traefik first
          dirs="$traefik"$'\n'"$others"
          echo "dirs<<EOF" >> $GITHUB_OUTPUT
          echo "$dirs" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Validate all docker-compose files
        run: |
          while IFS= read -r dir; do
            [ -z "$dir" ] && continue
            echo "Validating $dir/docker-compose.yml"
            (cd "$dir" && docker compose --env-file /dev/null config -q)
          done <<< "${{ steps.find-compose.outputs.dirs }}"

      - name: Pull latest images
        run: |
          while IFS= read -r dir; do
            [ -z "$dir" ] && continue
            echo "Pulling images for $dir"
            (cd "$dir" && docker compose --env-file /dev/null pull)
          done <<< "${{ steps.find-compose.outputs.dirs }}"

      - name: Deploy services
        run: |
          while IFS= read -r dir; do
            [ -z "$dir" ] && continue
            echo "Deploying services in $dir"
            (cd "$dir" && docker compose --env-file /dev/null up -d --remove-orphans)
          done <<< "${{ steps.find-compose.outputs.dirs }}"

      - name: Cleanup old images
        run: docker image prune -f
